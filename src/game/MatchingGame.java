/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.awt.CardLayout;
import java.awt.Dimension;
import static java.awt.Image.SCALE_DEFAULT;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.ListIterator;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author Paul Duan
 */
public class MatchingGame extends javax.swing.JFrame {

    /**
     * Creates new form MatchingGame
     */
    public MatchingGame() {
        //use Class Image's getScaledInstance() to resize my background.
        background.setImage(background.getImage().getScaledInstance(647, 578, SCALE_DEFAULT));
        //put ImageIcon objects into maps, and allocate keys
        blocksMap.put(0, bedrock);
        blocksMap.put(1, bookshelf);
        blocksMap.put(2, chest);
        blocksMap.put(3, commandBlock);
        blocksMap.put(4, end);
        blocksMap.put(5, filledEnd);
        blocksMap.put(6, grass);
        blocksMap.put(7, limeGlass);
        blocksMap.put(8, oak);
        blocksMap.put(9, obsidian);
        itemsMap.put(0, diamond);
        itemsMap.put(1, diamondPic);
        itemsMap.put(2, enchantedBook);
        itemsMap.put(3, enchantedApp);
        itemsMap.put(4, goldApp);
        itemsMap.put(5, iron);
        itemsMap.put(6, netherStar);
        itemsMap.put(7, bestPic);
        itemsMap.put(8, bestSword);
        itemsMap.put(9, stoneSword);
        //Initialize all buttons and components
        initComponents();
        //put all buttons into ArrayList
        blocksButtons.add(button1);
        blocksButtons.add(button2);
        blocksButtons.add(button3);
        blocksButtons.add(button4);
        blocksButtons.add(button5);
        blocksButtons.add(button6);
        blocksButtons.add(button7);
        blocksButtons.add(button8);
        blocksButtons.add(button9);
        blocksButtons.add(button10);
        blocksButtons.add(button11);
        blocksButtons.add(button12);
        blocksButtons.add(button13);
        blocksButtons.add(button14);
        blocksButtons.add(button15);
        blocksButtons.add(button16);
        blocksButtons.add(button17);
        blocksButtons.add(button18);
        blocksButtons.add(button19);
        blocksButtons.add(button20);
        itemsButtons.add(button21);
        itemsButtons.add(button22);
        itemsButtons.add(button23);
        itemsButtons.add(button24);
        itemsButtons.add(button25);
        itemsButtons.add(button26);
        itemsButtons.add(button27);
        itemsButtons.add(button28);
        itemsButtons.add(button29);
        itemsButtons.add(button30);
        itemsButtons.add(button31);
        itemsButtons.add(button32);
        itemsButtons.add(button33);
        itemsButtons.add(button34);
        itemsButtons.add(button35);
        itemsButtons.add(button36);
        itemsButtons.add(button37);
        itemsButtons.add(button38);
        itemsButtons.add(button39);
        itemsButtons.add(button40);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new MyJPanel(background);
        titleLabel = new javax.swing.JLabel();
        blocksMode = new javax.swing.JButton();
        itemsMode = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        blocksPanel = new MyJPanel(gameBack);
        subtitleLabel = new javax.swing.JLabel();
        gamePanel = new javax.swing.JPanel();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        button10 = new javax.swing.JButton();
        button11 = new javax.swing.JButton();
        button12 = new javax.swing.JButton();
        button13 = new javax.swing.JButton();
        button14 = new javax.swing.JButton();
        button15 = new javax.swing.JButton();
        button16 = new javax.swing.JButton();
        button17 = new javax.swing.JButton();
        button18 = new javax.swing.JButton();
        button19 = new javax.swing.JButton();
        button20 = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        reshuffleButton = new javax.swing.JButton();
        fireworkLabel = new javax.swing.JLabel();
        fireworkLabel2 = new javax.swing.JLabel();
        itemsPanel = new MyJPanel(gameBack);
        subtitleLabel2 = new javax.swing.JLabel();
        gamePanel2 = new javax.swing.JPanel();
        button21 = new javax.swing.JButton();
        button22 = new javax.swing.JButton();
        button23 = new javax.swing.JButton();
        button24 = new javax.swing.JButton();
        button25 = new javax.swing.JButton();
        button26 = new javax.swing.JButton();
        button27 = new javax.swing.JButton();
        button28 = new javax.swing.JButton();
        button29 = new javax.swing.JButton();
        button30 = new javax.swing.JButton();
        button31 = new javax.swing.JButton();
        button32 = new javax.swing.JButton();
        button33 = new javax.swing.JButton();
        button34 = new javax.swing.JButton();
        button35 = new javax.swing.JButton();
        button36 = new javax.swing.JButton();
        button37 = new javax.swing.JButton();
        button38 = new javax.swing.JButton();
        button39 = new javax.swing.JButton();
        button40 = new javax.swing.JButton();
        backButton2 = new javax.swing.JButton();
        reshuffleButton2 = new javax.swing.JButton();
        fireworkLabel3 = new javax.swing.JLabel();
        fireworkLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Minecraft Matching Game");
        setIconImage(icon.getImage());
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        mainPanel.setPreferredSize(new Dimension(638,569));

        titleLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Matching Game - Minecraft Themes");

        blocksMode.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        blocksMode.setForeground(new java.awt.Color(255, 255, 255));
        blocksMode.setIcon(button);
        blocksMode.setText("Match Minecraft Blocks");
        blocksMode.setBorder(null);
        blocksMode.setFocusable(false);
        blocksMode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        blocksMode.setPressedIcon(buttonPressed);
        blocksMode.setRolloverIcon(buttonPressed);
        blocksMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blocksModeActionPerformed(evt);
            }
        });

        itemsMode.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        itemsMode.setForeground(new java.awt.Color(255, 255, 255));
        itemsMode.setIcon(button);
        itemsMode.setText("Match Minecraft Items");
        itemsMode.setBorder(null);
        itemsMode.setFocusable(false);
        itemsMode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        itemsMode.setPressedIcon(buttonPressed);
        itemsMode.setRolloverIcon(buttonPressed);
        itemsMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsModeActionPerformed(evt);
            }
        });

        exit.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setIcon(button);
        exit.setText("Exit Game");
        exit.setBorder(null);
        exit.setFocusable(false);
        exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exit.setPressedIcon(buttonPressed);
        exit.setRolloverIcon(buttonPressed);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blocksMode, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemsMode, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(235, 235, 235)
                .addComponent(blocksMode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(itemsMode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(mainPanel, "mainCard");

        blocksPanel.setPreferredSize(new java.awt.Dimension(638, 569));
        blocksPanel.setLayout(null);

        subtitleLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        subtitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        subtitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitleLabel.setText("Match Minecraft Blocks");
        subtitleLabel.setAlignmentX(0.5F);
        subtitleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        blocksPanel.add(subtitleLabel);
        subtitleLabel.setBounds(110, 11, 420, 43);

        gamePanel.setOpaque(false);
        gamePanel.setLayout(new java.awt.GridLayout(4, 5, 5, 5));

        button1.setBackground(new java.awt.Color(255, 255, 255));
        button1.setForeground(new java.awt.Color(255, 255, 255));
        button1.setIcon(barrier);
        button1.setContentAreaFilled(false);
        button1.setFocusable(false);
        button1.setPressedIcon(barrierPressed);
        button1.setRolloverIcon(barrierPressed);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        gamePanel.add(button1);

        button2.setBackground(new java.awt.Color(255, 255, 255));
        button2.setForeground(new java.awt.Color(255, 255, 255));
        button2.setIcon(barrier);
        button2.setContentAreaFilled(false);
        button2.setFocusable(false);
        button2.setPressedIcon(barrierPressed);
        button2.setRolloverIcon(barrierPressed);
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        gamePanel.add(button2);

        button3.setBackground(new java.awt.Color(255, 255, 255));
        button3.setForeground(new java.awt.Color(255, 255, 255));
        button3.setIcon(barrier);
        button3.setContentAreaFilled(false);
        button3.setFocusable(false);
        button3.setPressedIcon(barrierPressed);
        button3.setRolloverIcon(barrierPressed);
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });
        gamePanel.add(button3);

        button4.setBackground(new java.awt.Color(255, 255, 255));
        button4.setForeground(new java.awt.Color(255, 255, 255));
        button4.setIcon(barrier);
        button4.setContentAreaFilled(false);
        button4.setFocusable(false);
        button4.setPressedIcon(barrierPressed);
        button4.setRolloverIcon(barrierPressed);
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });
        gamePanel.add(button4);

        button5.setBackground(new java.awt.Color(255, 255, 255));
        button5.setForeground(new java.awt.Color(255, 255, 255));
        button5.setIcon(barrier);
        button5.setContentAreaFilled(false);
        button5.setFocusable(false);
        button5.setPressedIcon(barrierPressed);
        button5.setRolloverIcon(barrierPressed);
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });
        gamePanel.add(button5);

        button6.setBackground(new java.awt.Color(255, 255, 255));
        button6.setForeground(new java.awt.Color(255, 255, 255));
        button6.setIcon(barrier);
        button6.setContentAreaFilled(false);
        button6.setFocusable(false);
        button6.setPressedIcon(barrierPressed);
        button6.setRolloverIcon(barrierPressed);
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });
        gamePanel.add(button6);

        button7.setBackground(new java.awt.Color(255, 255, 255));
        button7.setForeground(new java.awt.Color(255, 255, 255));
        button7.setIcon(barrier);
        button7.setContentAreaFilled(false);
        button7.setFocusable(false);
        button7.setPressedIcon(barrierPressed);
        button7.setRolloverIcon(barrierPressed);
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });
        gamePanel.add(button7);

        button8.setBackground(new java.awt.Color(255, 255, 255));
        button8.setForeground(new java.awt.Color(255, 255, 255));
        button8.setIcon(barrier);
        button8.setContentAreaFilled(false);
        button8.setFocusable(false);
        button8.setPressedIcon(barrierPressed);
        button8.setRolloverIcon(barrierPressed);
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });
        gamePanel.add(button8);

        button9.setBackground(new java.awt.Color(255, 255, 255));
        button9.setForeground(new java.awt.Color(255, 255, 255));
        button9.setIcon(barrier);
        button9.setContentAreaFilled(false);
        button9.setFocusable(false);
        button9.setPressedIcon(barrierPressed);
        button9.setRolloverIcon(barrierPressed);
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });
        gamePanel.add(button9);

        button10.setBackground(new java.awt.Color(255, 255, 255));
        button10.setForeground(new java.awt.Color(255, 255, 255));
        button10.setIcon(barrier);
        button10.setContentAreaFilled(false);
        button10.setFocusable(false);
        button10.setPressedIcon(barrierPressed);
        button10.setRolloverIcon(barrierPressed);
        button10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button10ActionPerformed(evt);
            }
        });
        gamePanel.add(button10);

        button11.setBackground(new java.awt.Color(255, 255, 255));
        button11.setForeground(new java.awt.Color(255, 255, 255));
        button11.setIcon(barrier);
        button11.setContentAreaFilled(false);
        button11.setFocusable(false);
        button11.setPressedIcon(barrierPressed);
        button11.setRolloverIcon(barrierPressed);
        button11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11ActionPerformed(evt);
            }
        });
        gamePanel.add(button11);

        button12.setBackground(new java.awt.Color(255, 255, 255));
        button12.setForeground(new java.awt.Color(255, 255, 255));
        button12.setIcon(barrier);
        button12.setContentAreaFilled(false);
        button12.setFocusable(false);
        button12.setPressedIcon(barrierPressed);
        button12.setRolloverIcon(barrierPressed);
        button12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button12ActionPerformed(evt);
            }
        });
        gamePanel.add(button12);

        button13.setBackground(new java.awt.Color(255, 255, 255));
        button13.setForeground(new java.awt.Color(255, 255, 255));
        button13.setIcon(barrier);
        button13.setContentAreaFilled(false);
        button13.setFocusable(false);
        button13.setPressedIcon(barrierPressed);
        button13.setRolloverIcon(barrierPressed);
        button13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button13ActionPerformed(evt);
            }
        });
        gamePanel.add(button13);

        button14.setBackground(new java.awt.Color(255, 255, 255));
        button14.setForeground(new java.awt.Color(255, 255, 255));
        button14.setIcon(barrier);
        button14.setContentAreaFilled(false);
        button14.setFocusable(false);
        button14.setPressedIcon(barrierPressed);
        button14.setRolloverIcon(barrierPressed);
        button14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button14ActionPerformed(evt);
            }
        });
        gamePanel.add(button14);

        button15.setBackground(new java.awt.Color(255, 255, 255));
        button15.setForeground(new java.awt.Color(255, 255, 255));
        button15.setIcon(barrier);
        button15.setContentAreaFilled(false);
        button15.setFocusable(false);
        button15.setPressedIcon(barrierPressed);
        button15.setRolloverIcon(barrierPressed);
        button15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button15ActionPerformed(evt);
            }
        });
        gamePanel.add(button15);

        button16.setBackground(new java.awt.Color(255, 255, 255));
        button16.setForeground(new java.awt.Color(255, 255, 255));
        button16.setIcon(barrier);
        button16.setContentAreaFilled(false);
        button16.setFocusable(false);
        button16.setPressedIcon(barrierPressed);
        button16.setRolloverIcon(barrierPressed);
        button16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button16ActionPerformed(evt);
            }
        });
        gamePanel.add(button16);

        button17.setBackground(new java.awt.Color(255, 255, 255));
        button17.setForeground(new java.awt.Color(255, 255, 255));
        button17.setIcon(barrier);
        button17.setContentAreaFilled(false);
        button17.setFocusable(false);
        button17.setPressedIcon(barrierPressed);
        button17.setRolloverIcon(barrierPressed);
        button17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button17ActionPerformed(evt);
            }
        });
        gamePanel.add(button17);

        button18.setBackground(new java.awt.Color(255, 255, 255));
        button18.setForeground(new java.awt.Color(255, 255, 255));
        button18.setIcon(barrier);
        button18.setContentAreaFilled(false);
        button18.setFocusable(false);
        button18.setPressedIcon(barrierPressed);
        button18.setRolloverIcon(barrierPressed);
        button18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button18ActionPerformed(evt);
            }
        });
        gamePanel.add(button18);

        button19.setBackground(new java.awt.Color(255, 255, 255));
        button19.setForeground(new java.awt.Color(255, 255, 255));
        button19.setIcon(barrier);
        button19.setContentAreaFilled(false);
        button19.setFocusable(false);
        button19.setPressedIcon(barrierPressed);
        button19.setRolloverIcon(barrierPressed);
        button19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button19ActionPerformed(evt);
            }
        });
        gamePanel.add(button19);

        button20.setBackground(new java.awt.Color(255, 255, 255));
        button20.setForeground(new java.awt.Color(255, 255, 255));
        button20.setIcon(barrier);
        button20.setContentAreaFilled(false);
        button20.setFocusable(false);
        button20.setPressedIcon(barrierPressed);
        button20.setRolloverIcon(barrierPressed);
        button20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button20ActionPerformed(evt);
            }
        });
        gamePanel.add(button20);

        blocksPanel.add(gamePanel);
        gamePanel.setBounds(35, 60, 573, 440);

        backButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(button);
        backButton.setText("Back to Menu");
        backButton.setBorder(null);
        backButton.setFocusable(false);
        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backButton.setPressedIcon(buttonPressed);
        backButton.setRolloverIcon(buttonPressed);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        blocksPanel.add(backButton);
        backButton.setBounds(30, 518, 280, 40);

        reshuffleButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        reshuffleButton.setForeground(new java.awt.Color(255, 255, 255));
        reshuffleButton.setIcon(button);
        reshuffleButton.setText("Reshuffle");
        reshuffleButton.setBorder(null);
        reshuffleButton.setFocusable(false);
        reshuffleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reshuffleButton.setPressedIcon(buttonPressed);
        reshuffleButton.setRolloverIcon(buttonPressed);
        reshuffleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reshuffleButtonActionPerformed(evt);
            }
        });
        blocksPanel.add(reshuffleButton);
        reshuffleButton.setBounds(328, 518, 280, 40);

        fireworkLabel.setIcon(firework);
        blocksPanel.add(fireworkLabel);
        fireworkLabel.setBounds(410, 0, 96, 96);

        fireworkLabel2.setIcon(firework);
        blocksPanel.add(fireworkLabel2);
        fireworkLabel2.setBounds(140, 0, 96, 96);

        getContentPane().add(blocksPanel, "blocksCard");

        itemsPanel.setPreferredSize(new java.awt.Dimension(638, 569));
        itemsPanel.setLayout(null);

        subtitleLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        subtitleLabel2.setForeground(new java.awt.Color(255, 255, 255));
        subtitleLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitleLabel2.setText("Match Minecraft Items");
        subtitleLabel2.setAlignmentX(0.5F);
        subtitleLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        itemsPanel.add(subtitleLabel2);
        subtitleLabel2.setBounds(110, 11, 420, 43);

        gamePanel2.setOpaque(false);
        gamePanel2.setLayout(new java.awt.GridLayout(4, 5, 5, 5));

        button21.setBackground(new java.awt.Color(255, 255, 255));
        button21.setForeground(new java.awt.Color(255, 255, 255));
        button21.setIcon(barrier);
        button21.setContentAreaFilled(false);
        button21.setFocusable(false);
        button21.setPressedIcon(barrierPressed);
        button21.setRolloverIcon(barrierPressed);
        button21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button21ActionPerformed(evt);
            }
        });
        gamePanel2.add(button21);

        button22.setBackground(new java.awt.Color(255, 255, 255));
        button22.setForeground(new java.awt.Color(255, 255, 255));
        button22.setIcon(barrier);
        button22.setContentAreaFilled(false);
        button22.setFocusable(false);
        button22.setPressedIcon(barrierPressed);
        button22.setRolloverIcon(barrierPressed);
        button22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button22ActionPerformed(evt);
            }
        });
        gamePanel2.add(button22);

        button23.setBackground(new java.awt.Color(255, 255, 255));
        button23.setForeground(new java.awt.Color(255, 255, 255));
        button23.setIcon(barrier);
        button23.setContentAreaFilled(false);
        button23.setFocusable(false);
        button23.setPressedIcon(barrierPressed);
        button23.setRolloverIcon(barrierPressed);
        button23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button23ActionPerformed(evt);
            }
        });
        gamePanel2.add(button23);

        button24.setBackground(new java.awt.Color(255, 255, 255));
        button24.setForeground(new java.awt.Color(255, 255, 255));
        button24.setIcon(barrier);
        button24.setContentAreaFilled(false);
        button24.setFocusable(false);
        button24.setPressedIcon(barrierPressed);
        button24.setRolloverIcon(barrierPressed);
        button24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button24ActionPerformed(evt);
            }
        });
        gamePanel2.add(button24);

        button25.setBackground(new java.awt.Color(255, 255, 255));
        button25.setForeground(new java.awt.Color(255, 255, 255));
        button25.setIcon(barrier);
        button25.setContentAreaFilled(false);
        button25.setFocusable(false);
        button25.setPressedIcon(barrierPressed);
        button25.setRolloverIcon(barrierPressed);
        button25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button25ActionPerformed(evt);
            }
        });
        gamePanel2.add(button25);

        button26.setBackground(new java.awt.Color(255, 255, 255));
        button26.setForeground(new java.awt.Color(255, 255, 255));
        button26.setIcon(barrier);
        button26.setContentAreaFilled(false);
        button26.setFocusable(false);
        button26.setPressedIcon(barrierPressed);
        button26.setRolloverIcon(barrierPressed);
        button26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button26ActionPerformed(evt);
            }
        });
        gamePanel2.add(button26);

        button27.setBackground(new java.awt.Color(255, 255, 255));
        button27.setForeground(new java.awt.Color(255, 255, 255));
        button27.setIcon(barrier);
        button27.setContentAreaFilled(false);
        button27.setFocusable(false);
        button27.setPressedIcon(barrierPressed);
        button27.setRolloverIcon(barrierPressed);
        button27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button27ActionPerformed(evt);
            }
        });
        gamePanel2.add(button27);

        button28.setBackground(new java.awt.Color(255, 255, 255));
        button28.setForeground(new java.awt.Color(255, 255, 255));
        button28.setIcon(barrier);
        button28.setContentAreaFilled(false);
        button28.setFocusable(false);
        button28.setPressedIcon(barrierPressed);
        button28.setRolloverIcon(barrierPressed);
        button28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button28ActionPerformed(evt);
            }
        });
        gamePanel2.add(button28);

        button29.setBackground(new java.awt.Color(255, 255, 255));
        button29.setForeground(new java.awt.Color(255, 255, 255));
        button29.setIcon(barrier);
        button29.setContentAreaFilled(false);
        button29.setFocusable(false);
        button29.setPressedIcon(barrierPressed);
        button29.setRolloverIcon(barrierPressed);
        button29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button29ActionPerformed(evt);
            }
        });
        gamePanel2.add(button29);

        button30.setBackground(new java.awt.Color(255, 255, 255));
        button30.setForeground(new java.awt.Color(255, 255, 255));
        button30.setIcon(barrier);
        button30.setContentAreaFilled(false);
        button30.setFocusable(false);
        button30.setPressedIcon(barrierPressed);
        button30.setRolloverIcon(barrierPressed);
        button30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button30ActionPerformed(evt);
            }
        });
        gamePanel2.add(button30);

        button31.setBackground(new java.awt.Color(255, 255, 255));
        button31.setForeground(new java.awt.Color(255, 255, 255));
        button31.setIcon(barrier);
        button31.setContentAreaFilled(false);
        button31.setFocusable(false);
        button31.setPressedIcon(barrierPressed);
        button31.setRolloverIcon(barrierPressed);
        button31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button31ActionPerformed(evt);
            }
        });
        gamePanel2.add(button31);

        button32.setBackground(new java.awt.Color(255, 255, 255));
        button32.setForeground(new java.awt.Color(255, 255, 255));
        button32.setIcon(barrier);
        button32.setContentAreaFilled(false);
        button32.setFocusable(false);
        button32.setPressedIcon(barrierPressed);
        button32.setRolloverIcon(barrierPressed);
        button32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button32ActionPerformed(evt);
            }
        });
        gamePanel2.add(button32);

        button33.setBackground(new java.awt.Color(255, 255, 255));
        button33.setForeground(new java.awt.Color(255, 255, 255));
        button33.setIcon(barrier);
        button33.setContentAreaFilled(false);
        button33.setFocusable(false);
        button33.setPressedIcon(barrierPressed);
        button33.setRolloverIcon(barrierPressed);
        button33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button33ActionPerformed(evt);
            }
        });
        gamePanel2.add(button33);

        button34.setBackground(new java.awt.Color(255, 255, 255));
        button34.setForeground(new java.awt.Color(255, 255, 255));
        button34.setIcon(barrier);
        button34.setContentAreaFilled(false);
        button34.setFocusable(false);
        button34.setPressedIcon(barrierPressed);
        button34.setRolloverIcon(barrierPressed);
        button34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button34ActionPerformed(evt);
            }
        });
        gamePanel2.add(button34);

        button35.setBackground(new java.awt.Color(255, 255, 255));
        button35.setForeground(new java.awt.Color(255, 255, 255));
        button35.setIcon(barrier);
        button35.setContentAreaFilled(false);
        button35.setFocusable(false);
        button35.setPressedIcon(barrierPressed);
        button35.setRolloverIcon(barrierPressed);
        button35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button35ActionPerformed(evt);
            }
        });
        gamePanel2.add(button35);

        button36.setBackground(new java.awt.Color(255, 255, 255));
        button36.setForeground(new java.awt.Color(255, 255, 255));
        button36.setIcon(barrier);
        button36.setContentAreaFilled(false);
        button36.setFocusable(false);
        button36.setPressedIcon(barrierPressed);
        button36.setRolloverIcon(barrierPressed);
        button36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button36ActionPerformed(evt);
            }
        });
        gamePanel2.add(button36);

        button37.setBackground(new java.awt.Color(255, 255, 255));
        button37.setForeground(new java.awt.Color(255, 255, 255));
        button37.setIcon(barrier);
        button37.setContentAreaFilled(false);
        button37.setFocusable(false);
        button37.setPressedIcon(barrierPressed);
        button37.setRolloverIcon(barrierPressed);
        button37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button37ActionPerformed(evt);
            }
        });
        gamePanel2.add(button37);

        button38.setBackground(new java.awt.Color(255, 255, 255));
        button38.setForeground(new java.awt.Color(255, 255, 255));
        button38.setIcon(barrier);
        button38.setContentAreaFilled(false);
        button38.setFocusable(false);
        button38.setPressedIcon(barrierPressed);
        button38.setRolloverIcon(barrierPressed);
        button38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button38ActionPerformed(evt);
            }
        });
        gamePanel2.add(button38);

        button39.setBackground(new java.awt.Color(255, 255, 255));
        button39.setForeground(new java.awt.Color(255, 255, 255));
        button39.setIcon(barrier);
        button39.setContentAreaFilled(false);
        button39.setFocusable(false);
        button39.setPressedIcon(barrierPressed);
        button39.setRolloverIcon(barrierPressed);
        button39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button39ActionPerformed(evt);
            }
        });
        gamePanel2.add(button39);

        button40.setBackground(new java.awt.Color(255, 255, 255));
        button40.setForeground(new java.awt.Color(255, 255, 255));
        button40.setIcon(barrier);
        button40.setContentAreaFilled(false);
        button40.setFocusable(false);
        button40.setPressedIcon(barrierPressed);
        button40.setRolloverIcon(barrierPressed);
        button40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button40ActionPerformed(evt);
            }
        });
        gamePanel2.add(button40);

        itemsPanel.add(gamePanel2);
        gamePanel2.setBounds(35, 60, 573, 440);

        backButton2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        backButton2.setForeground(new java.awt.Color(255, 255, 255));
        backButton2.setIcon(button);
        backButton2.setText("Back to Menu");
        backButton2.setBorder(null);
        backButton2.setFocusable(false);
        backButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backButton2.setPressedIcon(buttonPressed);
        backButton2.setRolloverIcon(buttonPressed);
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });
        itemsPanel.add(backButton2);
        backButton2.setBounds(30, 518, 280, 40);

        reshuffleButton2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        reshuffleButton2.setForeground(new java.awt.Color(255, 255, 255));
        reshuffleButton2.setIcon(button);
        reshuffleButton2.setText("Reshuffle");
        reshuffleButton2.setBorder(null);
        reshuffleButton2.setFocusable(false);
        reshuffleButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reshuffleButton2.setPressedIcon(buttonPressed);
        reshuffleButton2.setRolloverIcon(buttonPressed);
        reshuffleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reshuffleButton2ActionPerformed(evt);
            }
        });
        itemsPanel.add(reshuffleButton2);
        reshuffleButton2.setBounds(328, 518, 280, 40);

        fireworkLabel3.setIcon(firework);
        itemsPanel.add(fireworkLabel3);
        fireworkLabel3.setBounds(410, 0, 96, 96);

        fireworkLabel4.setIcon(firework);
        itemsPanel.add(fireworkLabel4);
        fireworkLabel4.setBounds(140, 0, 96, 96);

        getContentPane().add(itemsPanel, "itemsCard");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     buttonAction method for all cards(Buttons)
     * My thinking:
     * -When the button is enabled(true), it shows the barrier image means the card faces down.
     * -When the button is enabled(false), it shows the image it was allocated means the card faces up.
     * -Because when button is enabled(false) we can not click or do anything to it, so that is why I do that.
     * -If the image index is the same which means the same image, nothing will happen, they stay disable.
     * -If the image index is different, than in anther thread after 0.25s it will be set to enbale and show barrier image.
     Args:
     * btn:which btn is pressed, buttonId: the Id I give to button to get image index from "arr"
     * map: which mode is player playing, blocks? or items?
     */
    public void buttonAction(JButton btn, int buttonId, HashMap<Integer, ImageIcon> map) {
        int index = arr.get(buttonId); //use buttonId to get Image index from arr
        btn.setDisabledIcon(map.get(index)); //set disabled Icon
        btn.setEnabled(false); //set disable
        if (status == 1) { //If this button is the first button
            firstBtn = btn;
            firstIndex = index;
            status++; //update status
        } else if (status == 2) { //If this button is the second button
            if (firstIndex != index) { //If they are different
                //start new thread
                d = new Delay(firstBtn, btn);
                delayThread = new Thread(d);
                delayThread.start();
                status--; //Update status
            } else { //If they are the same
                cardsLeft -= 2; //-2 cards from the 20 cards
                if (cardsLeft == 0) { //if there is nothing left, you win
                    subtitleLabel.setText("Congratulation!!");
                    subtitleLabel2.setText("Congratulation!!");
                    fireworkLabel.setVisible(true);
                    fireworkLabel2.setVisible(true);
                    fireworkLabel3.setVisible(true);
                    fireworkLabel4.setVisible(true);
                }
                //update status
                status--;
            }
        }
    }
    
    /**
     Shuffling methods
     * I use the static method shuffle of Collections Class to shuffle the arrangement
     * of [0,0,1,1,2,2,3,3,...]
     */
    public void shuffling(ArrayList<JButton> list) {
        cardsLeft = 20; //reset cardLeft
        status = 1; //reset status
        firstBtn = null; //reset the firstbtn from last game
        fireworkLabel.setVisible(false); //hide firework
        fireworkLabel2.setVisible(false);
        fireworkLabel3.setVisible(false);
        fireworkLabel4.setVisible(false);
        Collections.shuffle(arr); //shuffle
        subtitleLabel.setText("Match Minecraft Blocks"); //Change title
        subtitleLabel2.setText("Match Minecraft Items");
        ListIterator<JButton> iterator = list.listIterator();
        while (iterator.hasNext()) {
            //Iterate all buttons in blocksButtons or itemsButtons
            iterator.next().setEnabled(true); //set them to faceing down
        }
    }
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0); //exit button
    }//GEN-LAST:event_exitActionPerformed

    private void blocksModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blocksModeActionPerformed
        // TODO add your handling code here:
        //the mode which match blocks in Minecraft
        //add "0,0,1,1,..." into "arr"
        arr = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            arr.add(i);
            arr.add(i);
        }
        //shuffle and ready to start
        shuffling(blocksButtons);
        //show blocksCard, because I use CardLayout to manage all pages
        CardLayout cl = (CardLayout) getContentPane().getLayout();
        cl.show(getContentPane(), "blocksCard");
    }//GEN-LAST:event_blocksModeActionPerformed

    private void itemsModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemsModeActionPerformed
        // TODO add your handling code here:
        //the mode which match items in Minecraft
        arr = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            arr.add(i);
            arr.add(i);
        }
        shuffling(itemsButtons);
        CardLayout c1 = (CardLayout) getContentPane().getLayout();
        c1.show(getContentPane(), "itemsCard");
    }//GEN-LAST:event_itemsModeActionPerformed
    
    //Back to Main Page
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) getContentPane().getLayout();
        cl.show(getContentPane(), "mainCard");
    }//GEN-LAST:event_backButtonActionPerformed
    
    //Blocks Mode's buttons
    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        buttonAction(button1, 0, blocksMap);
    }//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:
        buttonAction(button2, 1, blocksMap);
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        // TODO add your handling code here:
        buttonAction(button3, 2, blocksMap);
    }//GEN-LAST:event_button3ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        // TODO add your handling code here:
        buttonAction(button4, 3, blocksMap);
    }//GEN-LAST:event_button4ActionPerformed

    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        // TODO add your handling code here:
        buttonAction(button5, 4, blocksMap);
    }//GEN-LAST:event_button5ActionPerformed

    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
        // TODO add your handling code here:
        buttonAction(button6, 5, blocksMap);
    }//GEN-LAST:event_button6ActionPerformed

    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
        // TODO add your handling code here:
        buttonAction(button7, 6, blocksMap);
    }//GEN-LAST:event_button7ActionPerformed

    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
        // TODO add your handling code here:
        buttonAction(button8, 7, blocksMap);
    }//GEN-LAST:event_button8ActionPerformed

    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
        // TODO add your handling code here:
        buttonAction(button9, 8, blocksMap);
    }//GEN-LAST:event_button9ActionPerformed

    private void button10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button10ActionPerformed
        // TODO add your handling code here:
        buttonAction(button10, 9, blocksMap);
    }//GEN-LAST:event_button10ActionPerformed

    private void button11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11ActionPerformed
        // TODO add your handling code here:
        buttonAction(button11, 10, blocksMap);
    }//GEN-LAST:event_button11ActionPerformed

    private void button12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button12ActionPerformed
        // TODO add your handling code here:
        buttonAction(button12, 11, blocksMap);
    }//GEN-LAST:event_button12ActionPerformed

    private void button14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button14ActionPerformed
        // TODO add your handling code here:
        buttonAction(button14, 13, blocksMap);
    }//GEN-LAST:event_button14ActionPerformed

    private void button15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button15ActionPerformed
        // TODO add your handling code here:
        buttonAction(button15, 14, blocksMap);
    }//GEN-LAST:event_button15ActionPerformed

    private void button16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button16ActionPerformed
        // TODO add your handling code here:
        buttonAction(button16, 15, blocksMap);
    }//GEN-LAST:event_button16ActionPerformed

    private void button17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button17ActionPerformed
        // TODO add your handling code here:
        buttonAction(button17, 16, blocksMap);
    }//GEN-LAST:event_button17ActionPerformed

    private void button13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button13ActionPerformed
        // TODO add your handling code here:
        buttonAction(button13, 12, blocksMap);
    }//GEN-LAST:event_button13ActionPerformed

    private void button18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button18ActionPerformed
        // TODO add your handling code here:
        buttonAction(button18, 17, blocksMap);
    }//GEN-LAST:event_button18ActionPerformed

    private void button19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button19ActionPerformed
        // TODO add your handling code here:
        buttonAction(button19, 18, blocksMap);
    }//GEN-LAST:event_button19ActionPerformed

    private void button20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button20ActionPerformed
        // TODO add your handling code here:
        buttonAction(button20, 19, blocksMap);
    }//GEN-LAST:event_button20ActionPerformed
    //Blocks mode's reshuffle button
    private void reshuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reshuffleButtonActionPerformed
        // TODO add your handling code here:
        shuffling(blocksButtons);
    }//GEN-LAST:event_reshuffleButtonActionPerformed

    //Items mode's buttons
    private void button21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button21ActionPerformed
        // TODO add your handling code here:
        buttonAction(button21, 0, itemsMap);
    }//GEN-LAST:event_button21ActionPerformed

    private void button22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button22ActionPerformed
        // TODO add your handling code here:
        buttonAction(button22, 1, itemsMap);
    }//GEN-LAST:event_button22ActionPerformed

    private void button23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button23ActionPerformed
        // TODO add your handling code here:
        buttonAction(button23, 2, itemsMap);
    }//GEN-LAST:event_button23ActionPerformed

    private void button24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button24ActionPerformed
        // TODO add your handling code here:
        buttonAction(button24, 3, itemsMap);
    }//GEN-LAST:event_button24ActionPerformed

    private void button25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button25ActionPerformed
        // TODO add your handling code here:
        buttonAction(button25, 4, itemsMap);
    }//GEN-LAST:event_button25ActionPerformed

    private void button26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button26ActionPerformed
        // TODO add your handling code here:
        buttonAction(button26, 5, itemsMap);
    }//GEN-LAST:event_button26ActionPerformed

    private void button27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button27ActionPerformed
        // TODO add your handling code here:
        buttonAction(button27, 6, itemsMap);
    }//GEN-LAST:event_button27ActionPerformed

    private void button28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button28ActionPerformed
        // TODO add your handling code here:
        buttonAction(button28, 7, itemsMap);
    }//GEN-LAST:event_button28ActionPerformed

    private void button29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button29ActionPerformed
        // TODO add your handling code here:
        buttonAction(button29, 8, itemsMap);
    }//GEN-LAST:event_button29ActionPerformed

    private void button30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button30ActionPerformed
        // TODO add your handling code here:
        buttonAction(button30, 9, itemsMap);
    }//GEN-LAST:event_button30ActionPerformed

    private void button31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button31ActionPerformed
        // TODO add your handling code here:
        buttonAction(button31, 10, itemsMap);
    }//GEN-LAST:event_button31ActionPerformed

    private void button32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button32ActionPerformed
        // TODO add your handling code here:
        buttonAction(button32, 11, itemsMap);
    }//GEN-LAST:event_button32ActionPerformed

    private void button33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button33ActionPerformed
        // TODO add your handling code here:
        buttonAction(button33, 12, itemsMap);
    }//GEN-LAST:event_button33ActionPerformed

    private void button34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button34ActionPerformed
        // TODO add your handling code here:
        buttonAction(button34, 13, itemsMap);
    }//GEN-LAST:event_button34ActionPerformed

    private void button35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button35ActionPerformed
        // TODO add your handling code here:
        buttonAction(button35, 14, itemsMap);
    }//GEN-LAST:event_button35ActionPerformed

    private void button36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button36ActionPerformed
        // TODO add your handling code here:
        buttonAction(button36, 15, itemsMap);
    }//GEN-LAST:event_button36ActionPerformed

    private void button37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button37ActionPerformed
        // TODO add your handling code here:
        buttonAction(button37, 16, itemsMap);
    }//GEN-LAST:event_button37ActionPerformed

    private void button38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button38ActionPerformed
        // TODO add your handling code here:
        buttonAction(button38, 17, itemsMap);
    }//GEN-LAST:event_button38ActionPerformed

    private void button39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button39ActionPerformed
        // TODO add your handling code here:
        buttonAction(button39, 18, itemsMap);
    }//GEN-LAST:event_button39ActionPerformed

    private void button40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button40ActionPerformed
        // TODO add your handling code here:
        buttonAction(button40, 19, itemsMap);
    }//GEN-LAST:event_button40ActionPerformed
    //back to main page
    private void backButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton2ActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) getContentPane().getLayout();
        cl.show(getContentPane(), "mainCard");
    }//GEN-LAST:event_backButton2ActionPerformed
    //reshuffle button on items mode
    private void reshuffleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reshuffleButton2ActionPerformed
        // TODO add your handling code here:
        shuffling(itemsButtons);
    }//GEN-LAST:event_reshuffleButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton backButton2;
    private javax.swing.JButton blocksMode;
    private javax.swing.JPanel blocksPanel;
    private javax.swing.JButton button1;
    private javax.swing.JButton button10;
    private javax.swing.JButton button11;
    private javax.swing.JButton button12;
    private javax.swing.JButton button13;
    private javax.swing.JButton button14;
    private javax.swing.JButton button15;
    private javax.swing.JButton button16;
    private javax.swing.JButton button17;
    private javax.swing.JButton button18;
    private javax.swing.JButton button19;
    private javax.swing.JButton button2;
    private javax.swing.JButton button20;
    private javax.swing.JButton button21;
    private javax.swing.JButton button22;
    private javax.swing.JButton button23;
    private javax.swing.JButton button24;
    private javax.swing.JButton button25;
    private javax.swing.JButton button26;
    private javax.swing.JButton button27;
    private javax.swing.JButton button28;
    private javax.swing.JButton button29;
    private javax.swing.JButton button3;
    private javax.swing.JButton button30;
    private javax.swing.JButton button31;
    private javax.swing.JButton button32;
    private javax.swing.JButton button33;
    private javax.swing.JButton button34;
    private javax.swing.JButton button35;
    private javax.swing.JButton button36;
    private javax.swing.JButton button37;
    private javax.swing.JButton button38;
    private javax.swing.JButton button39;
    private javax.swing.JButton button4;
    private javax.swing.JButton button40;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton exit;
    private javax.swing.JLabel fireworkLabel;
    private javax.swing.JLabel fireworkLabel2;
    private javax.swing.JLabel fireworkLabel3;
    private javax.swing.JLabel fireworkLabel4;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JPanel gamePanel2;
    private javax.swing.JButton itemsMode;
    private javax.swing.JPanel itemsPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton reshuffleButton;
    private javax.swing.JButton reshuffleButton2;
    private javax.swing.JLabel subtitleLabel;
    private javax.swing.JLabel subtitleLabel2;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    int status = 1; //Game's status, 1 means that it has no fliped cards(Disabled buttons), and 2 means there is one fliped card need to be compared.
    int firstIndex; //the image Index of first fliped card
    JButton firstBtn; //the object of first fliped card
    int secondChosen; //the object of second fliped card
    int cardsLeft; //how many cards left.
    /**
     * Images Use getResource() method to get images because when we export this
     * project as a jar file, the path of images will change and folder "src"
     * will not exist anymore.
     */
    ImageIcon bedrock = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Bedrock.png"));
    ImageIcon bookshelf = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Bookshelf.png"));
    ImageIcon chest = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Chest.png"));
    ImageIcon commandBlock = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Command_Block.png"));
    ImageIcon end = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/End_Portal_Frame.png"));
    ImageIcon filledEnd = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Filled_End_Portal_Frame.png"));
    ImageIcon grass = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Grass_Block.png"));
    ImageIcon limeGlass = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Lime_Stained_Glass.png"));
    ImageIcon oak = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Oak_Log.png"));
    ImageIcon obsidian = new ImageIcon(MatchingGame.class.getResource("/pictures/blocks/Obsidian.png"));
    ImageIcon diamond = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Diamond.png"));
    ImageIcon diamondPic = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Diamond_Pickaxe.png"));
    ImageIcon enchantedBook = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Enchanted_Book.png"));
    ImageIcon enchantedApp = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Enchanted_Golden_Apple.png"));
    ImageIcon goldApp = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Golden_Apple.png"));
    ImageIcon iron = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Iron_Ingot.png"));
    ImageIcon netherStar = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Nether_Star.png"));
    ImageIcon bestPic = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Netherite_Pickaxe.png"));
    ImageIcon bestSword = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Netherite_Sword.png"));
    ImageIcon stoneSword = new ImageIcon(MatchingGame.class.getResource("/pictures/items/Stone_Sword.png"));
    ImageIcon barrier = new ImageIcon(MatchingGame.class.getResource("/pictures/Barrier.png"));
    ImageIcon background = new ImageIcon(MatchingGame.class.getResource("/pictures/Background.png"));
    ImageIcon gameBack = new ImageIcon(MatchingGame.class.getResource("/pictures/GameBack.png"));
    ImageIcon barrierPressed = new ImageIcon(MatchingGame.class.getResource("/pictures/BarrierPressed.png"));
    ImageIcon button = new ImageIcon(MatchingGame.class.getResource("/pictures/Button.png"));
    ImageIcon buttonPressed = new ImageIcon(MatchingGame.class.getResource("/pictures/Button2.png"));
    ImageIcon icon = new ImageIcon(MatchingGame.class.getResource("/pictures/Icon.png"));
    ImageIcon firework = new ImageIcon(MatchingGame.class.getResource("/pictures/Firework.gif"));
    /**
     * HashMaps Use HashMaps to store ImageIcon Objects, because the structure
     * of<KEY, VALUE> is very useful to match indexs and images.
     */
    HashMap<Integer, ImageIcon> blocksMap = new HashMap<>();
    HashMap<Integer, ImageIcon> itemsMap = new HashMap<>();
    /**
     * ArrayLists Use ArrayLists to store JButton Objects, so that we can use
     * iterator to operate all buttons(cards).
     */
    ArrayList<JButton> blocksButtons = new ArrayList<>();
    ArrayList<JButton> itemsButtons = new ArrayList<>();
    /**
     * ArrayList This ArrayList will contain 20 elements [0,0,1,1,2,2,3,3,...]
     */
    ArrayList<Integer> arr;
    //New Delay and Thread Oject
    Delay d;
    Thread delayThread;
}
